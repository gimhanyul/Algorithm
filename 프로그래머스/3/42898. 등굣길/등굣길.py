1.m x n 크기의 테이블을 만들어, 각 칸까지의 경로의 수를 저장합니다.
2.시작 지점인 (1, 1)은 경로의 수가 1이라고 초기화합니다.
3.물웅덩이가 있는 칸은 경로의 수를 0으로 설정합니다.
4.각 칸까지의 경로 수는 왼쪽 칸과 위쪽 칸의 경로 수의 합입니다. 단, 물웅덩이가 있는 칸은 제외합니다.
5.모든 칸에 대해 이 과정을 반복한 후, (m, n) 위치의 값을 반환합니다. 값이 매우 클 수 있으므로, 계산 과정에서 1,000,000,007로 나눈 나머지를 사용합니다.


def solution(m, n, puddles):
    # 격자를 만들고 모든 칸을 0으로 초기화합니다.
    grid = [[0] * (m + 1) for _ in range(n + 1)]
    # 시작점 초기화
    grid[1][1] = 1

    # 물웅덩이가 있는 위치를 표시합니다.
    for x, y in puddles:
        grid[y][x] = -1

    for i in range(1, n + 1):
        for j in range(1, m + 1):
            # 시작점이거나 물웅덩이인 경우 건너뜁니다.
            if (i == 1 and j == 1) or grid[i][j] == -1:
                continue

            # 왼쪽이나 위쪽 칸이 물웅덩이가 아닌 경우, 해당 칸까지의 경로 수를 더합니다.
            grid[i][j] = max(0, grid[i-1][j]) + max(0, grid[i][j-1])
            grid[i][j] %= 1000000007

    # 목적지 칸의 값을 반환합니다.
    return grid[n][m]
